name: 🏷️ Auto Tag & Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  auto-tag:
    name: 🏷️ Create Tag from Bump Commit
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'bump to ')
    
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
      should-release: ${{ steps.extract-version.outputs.should-release }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🔍 Extract version from commit message
      id: extract-version
      run: |
        commit_message="${{ github.event.head_commit.message }}"
        echo "Commit message: $commit_message"
        
        # 正規表現でバージョンを抽出 (例: "bump to v1.2.3" or "bump to 1.2.3")
        version=$(echo "$commit_message" | grep -oE 'bump to v?([0-9]+\.[0-9]+\.[0-9]+)' | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')
        
        if [ -z "$version" ]; then
          echo "❌ No valid version found in commit message"
          echo "should-release=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # v プレフィックスを追加
        if [[ ! $version =~ ^v ]]; then
          version="v$version"
        fi
        
        echo "📦 Extracted version: $version"
        echo "version=$version" >> $GITHUB_OUTPUT
        echo "should-release=true" >> $GITHUB_OUTPUT
        
        # 同じタグが既に存在するかチェック
        if git tag --list | grep -q "^$version$"; then
          echo "⚠️ Tag $version already exists"
          echo "should-release=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        
    - name: 🏷️ Create and push tag
      if: steps.extract-version.outputs.should-release == 'true'
      run: |
        version="${{ steps.extract-version.outputs.version }}"
        
        # Git config
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # タグ作成
        git tag -a "$version" -m "Release $version"
        git push origin "$version"
        
        echo "✅ Created and pushed tag: $version"

  build-and-release:
    name: 🚀 Build & Release
    runs-on: ubuntu-latest
    needs: auto-tag
    if: needs.auto-tag.outputs.should-release == 'true'
    
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.4'
        
    - name: 📚 Download dependencies
      run: go mod download
      
    - name: 🏗️ Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        mkdir -p dist
        version="${{ needs.auto-tag.outputs.version }}"
        binary_name="luna"
        
        if [ "$GOOS" = "windows" ]; then
          binary_name="${binary_name}.exe"
        fi
        
        echo "🏗️ Building ${binary_name} for ${GOOS}/${GOARCH}..."
        go build -ldflags="-s -w -X main.version=${version}" \
          -o "dist/luna-${GOOS}-${GOARCH}${binary_name##luna}" \
          ./cmd/bot/main.go
          
        # ファイル情報を表示
        ls -lh "dist/"
        
    - name: 📦 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: luna-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/
        retention-days: 30

  create-release:
    name: 📋 Create GitHub Release
    runs-on: ubuntu-latest
    needs: [auto-tag, build-and-release]
    if: needs.auto-tag.outputs.should-release == 'true'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
        
    - name: 📁 Organize artifacts
      run: |
        mkdir -p release-files
        find ./artifacts -name "luna-*" -type f -exec cp {} ./release-files/ \;
        ls -la ./release-files/
        
    - name: 📝 Generate changelog
      id: changelog
      run: |
        version="${{ needs.auto-tag.outputs.version }}"
        
        # 前のタグを取得
        previous_tag=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        if [ -n "$previous_tag" ]; then
          # 前のタグから現在までのコミットログを生成
          changelog=$(git log --oneline --pretty=format:"- %s" ${previous_tag}..HEAD | grep -v "^- bump to")
        else
          # 最初のリリースの場合
          changelog=$(git log --oneline --pretty=format:"- %s" | head -20 | grep -v "^- bump to")
        fi
        
        if [ -z "$changelog" ]; then
          changelog="- 初期リリース"
        fi
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$changelog" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: 🎉 Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.auto-tag.outputs.version }}
        name: "🌙 Luna Bot ${{ needs.auto-tag.outputs.version }}"
        body: |
          ## 🌙 Luna Bot ${{ needs.auto-tag.outputs.version }}
          
          ### 📋 変更内容
          ${{ steps.changelog.outputs.changelog }}
          
          ### 📦 ダウンロード
          
          | OS | アーキテクチャ | ダウンロード |
          |---|---|---|
          | 🐧 Linux | x64 | `luna-linux-amd64` |
          | 🐧 Linux | ARM64 | `luna-linux-arm64` |
          | 🪟 Windows | x64 | `luna-windows-amd64.exe` |
          | 🍎 macOS | Intel | `luna-darwin-amd64` |
          | 🍎 macOS | Apple Silicon | `luna-darwin-arm64` |
          
          ### 🚀 クイックスタート
          
          ```bash
          # 1. バイナリをダウンロード
          # 2. 設定ファイルを作成
          cp config.toml.example config.toml
          
          # 3. Discord トークンを設定
          # config.toml を編集してください
          
          # 4. 実行
          chmod +x luna-*     # Linux/macOS
          ./luna-*            # Linux/macOS
          # または
          luna-windows-*.exe  # Windows
          ```
          
          ### 📚 ドキュメント
          - [📝 設定ガイド](https://github.com/${{ github.repository }}/blob/main/CONFIG.md)
          - [🏗️ アーキテクチャ](https://github.com/${{ github.repository }}/blob/main/ARCHITECTURE.md)
          - [🔌 API リファレンス](https://github.com/${{ github.repository }}/blob/main/API.md)
          
          ---
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ needs.auto-tag.outputs.version }}
        files: release-files/*
        draft: false
        prerelease: ${{ contains(needs.auto-tag.outputs.version, 'beta') || contains(needs.auto-tag.outputs.version, 'alpha') || contains(needs.auto-tag.outputs.version, 'rc') }}
        generate_release_notes: false